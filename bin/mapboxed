#!/usr/bin/env node
const readline = require('readline');
const commander = require('commander');
const rimraf = require('rimraf');
const glob = require('glob');
const Queue = require('promise-queue');
const cliProgress = require('cli-progress');

// Import compiled mapboxed tools
const mapboxed = require('../dist/mapboxed.cjs');

/**
 * MAPBOXED CLI
 *
 * This file contains all the command line specific things mapboxed uses to fetch
 * and compile tiles.
 */

// Command line tools
commander
  .version(require('../package.json').version)
  .usage('[options]')
  .description('Downloads the tiles from mapbox and stitches them together')
  .requiredOption('-z, --zoom <zoom>', 'zoom level')
  .requiredOption('-x1 <x1>', 'left longitude boundary')
  .requiredOption('-x2 <x2>', 'right longitude boundary')
  .requiredOption('-y1 <y1>', 'top latitude boundary')
  .requiredOption('-y2 <y2>', 'bottom latitude boundary')
  .option('-o, --outfile <outfile>', 'output filename', 'mapboxed.jpg')
  .option('-t, --tileset <tileset>', 'mapbox tileset id', 'mapbox.satellite')
  .option('-k, --key <token>', 'mapbox token (will override read from MAPBOX_TOKEN environment variable)')
  .option('-f, --format <format>', 'image format to download (jpg90 | jpg80 | jpg70 | png256 | png128 | png64 | png32 | png)', 'jpg90')
  .option('-p, --parallel <parallel>', 'Number of parallel connection to make to mapbox', '5')
  .option('-r, --res2x', 'fetch @2x size resolution')
  .option('-s, --silent', 'do not confirm download size')
  .option('-c, --cache', 'keep and read from temp tile files in .mapboxed')
  .parse(process.argv);

// //////////////////////////////////////////////////////
// Helper functions

// pause the thread for ms milliseconds.
const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// Create readline
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  terminal: false,
});

// //////////////////////////////////////////////////////
// params for this script
let params;

// Mapboxed param validation
try {
  params = mapboxed.validateParams(commander);
} catch (e) {
  console.error(e);
  process.exit(1);
}

// //////////////////////////////////////////////////////
// Get an array of all the tiles we will need.
const { tiles, min, max, xTilesLength, yTilesLength } = mapboxed.generateTiles(params);

// Check cached parameter. If cached is true, then we don't need to re download files that
// we already have.
let toDownload = tiles;
if (commander.cache) {
  // Search for files within the .mapboxed cache directory
  const files = glob.sync('./.mapboxed/**/*');
  // Filter out the files that we already have.
  toDownload = toDownload.filter(([x, y]) => files.indexOf(mapboxed.imgPath(params, x, y)) < 0);
}

// //////////////////////////////////////////////////////
// Download and assemble image
const downloadAndAssemble = async () => {
  // Add new line spacing
  if (toDownload.length) console.log();

  // Fancy Status Bars
  const multibar = new cliProgress.MultiBar({
    stopOnComplete: true,
    hideCursor: true,
    forceRedraw: true,
    format: '{bar} {percentage}% | zoom: {zoom} x: {x} y: {y} | {value}/{total}',
  }, cliProgress.Presets.rect);

  // Promise queue so that we only download parallel number of photos at a time.
  const q = new Queue(params.parallel, Infinity);

  // Add all the tiles to the queue
  for (let i = 0; i < toDownload.length; i += 1) {
    const [x, y] = toDownload[i];
    q.add(() => {
      // Add a new bar to the multibar
      const bar = multibar.create(1, 0, { x, y, zoom: params.zoom });
      return mapboxed.downloadTile(params, x, y, (progress) => {
        bar.update(progress.loaded);
        bar.setTotal(progress.total);
      });
    });
  }

  // Wait for queue to finish
  // eslint-disable-next-line no-await-in-loop
  while (q.getQueueLength() + q.getPendingLength() > 0) await sleep(100);

  // Add new line spacing
  if (toDownload.length) console.log();

  // Print generated lat/lng bounds
  console.log(`Generated satellite image boundingbox: [${[
    ...mapboxed.num2deg(...min, params.n),
    ...mapboxed.num2deg(...max.map((d) => d + 1), params.n)].join(', ')
  }]`);

  console.log('compiling image...');

  await mapboxed
    .generateImage(
      params, tiles, xTilesLength, yTilesLength, async (s) => {
        await s.toFile(commander.outfile);

        // Delete cache
        if (!commander.cache) rimraf.sync('./.mapboxed');

        // Done
        console.log(`Satellite Image saved to ${commander.outfile}`);
      },
    );
};

// Silent option or cached and we have nothing to download
if (commander.silent || toDownload.length === 0) {
  rl.close();
  (async () => downloadAndAssemble())();
} else {
  process.stdout.write(
    `This will download ${toDownload.length} tiles from the mapbox API. 
    Are you sure you want to continue? (Y/N) `,
  );

  // Listen for yes
  rl.on('line', (line) => {
    rl.close();
    if (!line || line.charAt(0).toUpperCase() === 'Y') (async () => downloadAndAssemble())();
    else process.exit();
  });
}
